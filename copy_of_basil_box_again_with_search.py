# -*- coding: utf-8 -*-
"""Copy of BASIL BOX AGAIN WITH SEARCH.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ntpYa1-dmF1KuOIuzT5YhyObZm99aUDC
"""

import tkinter as tk
from tkinter import ttk, messagebox, simpledialog
import pandas as pd
from datetime import datetime

# Initial setup for global data structures
inventory = {
    "base": {"white rice": 50, "brown rice": 50, "salad": 50, "noodle": 50},
    "veggies": {"sweet potato": 50, "corn": 50, "peppers": 50, "eggplant": 50, "peas": 50},
    "meat": {"beef": 50, "chicken": 50, "shrimp": 50, "tofu": 50},
    "sauce": {"peanut": 50, "spicy curry": 50, "mild curry": 50, "tangy tamarind": 50}
}
customer_order_history = []
restock_history = []

class RestaurantApp(tk.Tk):
    def __init__(self):
        super().__init__()
        self.geometry('800x600')
        self.title('Restaurant Management System')
        self.create_login_screen()

    def create_login_screen(self):
        self.clear_screen()
        tk.Label(self, text="Username:").pack()
        username_entry = tk.Entry(self)
        username_entry.pack()
        tk.Label(self, text="Password:").pack()
        password_entry = tk.Entry(self, show='*')
        password_entry.pack()
        tk.Button(self, text="Login", command=lambda: self.authenticate_user(username_entry.get(), password_entry.get())).pack()

    def clear_screen(self):
        for widget in self.winfo_children():
            widget.destroy()

    def authenticate_user(self, username, password):
        if username == "admin" and password == "admin":
            self.create_manager_screen()
        elif username == "user" and password == "user":
            self.create_customer_screen()
        else:
            messagebox.showerror("Login failed", "Invalid credentials")

    def create_manager_screen(self):
        self.clear_screen()
        tk.Button(self, text="View Inventory", command=self.view_inventory).pack()
        tk.Button(self, text="Add Item to Inventory", command=self.add_item_to_inventory).pack()
        tk.Button(self, text="Delete Item from Inventory", command=lambda: self.modify_inventory(delete=True)).pack()
        tk.Button(self, text="View Order History", command=self.view_order_history).pack()
        tk.Button(self, text="Export to Excel", command=self.export_to_excel).pack()
        tk.Button(self, text="Log Out", command=self.create_login_screen).pack()

    def view_inventory(self):
        self.clear_screen()
        for category, items in inventory.items():
            tk.Label(self, text=f"{category.capitalize()}").pack(anchor='w')
            for item, quantity in items.items():
                tk.Label(self, text=f"{item}: {quantity}").pack(anchor='w')
        tk.Button(self, text="Back", command=self.create_manager_screen).pack()

    def add_item_to_inventory(self):
        self.modify_inventory(delete=False)

    def modify_inventory(self, delete=False):
        category = simpledialog.askstring("Input", "Category (base/veggies/meat/sauce):")
        item = simpledialog.askstring("Input", "Item name:")
        if not delete:
            quantity = simpledialog.askinteger("Input", "Quantity:")
        if category in inventory:
            if delete:
                if item in inventory[category]:
                    del inventory[category][item]
                    messagebox.showinfo("Success", f"Item '{item}' deleted successfully.")
                else:
                    messagebox.showerror("Error", "Item not found.")
            else:
                inventory[category][item] = quantity
                messagebox.showinfo("Success", f"Item '{item}' added with quantity {quantity}.")
        else:
            messagebox.showerror("Error", "Invalid category.")

    def view_order_history(self):
        self.clear_screen()
        for order in customer_order_history:
            tk.Label(self, text=f"Order at {order['time']}").pack(anchor='w')
            for category, item in order['order'].items():
                tk.Label(self, text=f"{category}: {item}").pack(anchor='w')
            tk.Label(self, text=f"Total cost: ${order['cost']}").pack(anchor='w')
        tk.Button(self, text="Back", command=self.create_manager_screen).pack()

    def export_to_excel(self):
        order_history_df = pd.DataFrame(customer_order_history)
        restock_history_df = pd.DataFrame(restock_history)
        with pd.ExcelWriter('OrderRestockReports.xlsx') as writer:
            order_history_df.to_excel(writer, sheet_name='OrderHistory')
            restock_history_df.to_excel(writer, sheet_name='RestockHistory')
        messagebox.showinfo("Export Successful", "Order and restock history exported to Excel.")

    def create_customer_screen(self):
        self.clear_screen()
        tk.Button(self, text="Place an Order", command=self.place_order).pack()
        tk.Button(self, text="View My Order History", command=self.view_my_order_history).pack()
        tk.Button(self, text="Log Out", command=self.create_login_screen).pack()

    def place_order(self):
        order = {}
        for category in inventory:
            item = simpledialog.askstring("Order", f"Choose your {category}: {list(inventory[category].keys())}")
            order[category] = item
        customer_order_history.append({"order": order, "cost": 10, "time": datetime.now().strftime("%Y-%m-%d %H:%M:%S")})
        messagebox.showinfo("Order Placed", "Your order has been placed.")

    def view_my_order_history(self):
        self.clear_screen()
        for order in customer_order_history:
            tk.Label(self, text=f"Order at {order['time']} - Cost: ${order['cost']}").pack(anchor='w')
        tk.Button(self, text="Back", command=self.create_customer_screen).pack()

if __name__ == "__main__":
    app = RestaurantApp()
    app.mainloop()